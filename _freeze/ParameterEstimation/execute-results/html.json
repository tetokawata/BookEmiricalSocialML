{
  "hash": "ff3b81b30e83a2df655edadd27c51263",
  "result": {
    "markdown": "# 線形モデルによるパラメータの推定 {#sec-ParameterLinearEstimation}\n\n-   関心のあるパラメータ$\\tau(X)=E[Y|d,X]-E[Y|d',X]$を埋め込んだ線形モデルを推定する。\n\n    -   典型的には、$E[Y|D,X]$を線形近似し、推定する。\n\n$$E[Y|D=d,X=x]=\\underbrace{\\tau}_{Interest\\ parameter}\\times d+\\underbrace{f(x)}_{Nuisance\\ function}$$ - $f(X)=\\beta_0 + \\beta_1 X_1 + ...+\\beta_LX_L$\n\n-   $\\tau$について点推定だけでなく、信頼区間も推定する。\n\n    -   [Section -@sec-ParameterEstimation] 線形モデルを推定し、信頼区間を計算する方法を紹介\n\n    -   [Section -@sec-Matching] 近似モデルの定式化への依存度を下げるために、マッチング法を用いた前処理を導入\n\n    -   [Section -@sec-Appendix]推定結果の表によるまとめ、可視化、および複数の推定結果を効率的に保存する方法を紹介\n\n## 設定\n\n::: {.panel-tabset}\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(estimatr) # Estimation with robust standard error\nlibrary(MatchIt) # Matching for preprocess\n\nData_R <- read_csv(\"ExampleData/Example.csv\")\n```\n:::\n\n\n-   [estimatr](https://declaredesign.org/r/estimatr/)\n\n-   [MatchIt](https://kosukeimai.github.io/MatchIt/)\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport statsmodels.formula.api as smf\n\nData_Python = pd.read_csv('ExampleData/Example.csv')\n```\n:::\n\n\n\n:::\n\n## パラメータの推定 {#sec-ParameterEstimation}\n\n-   $\\tau(x)=\\tau,f(x)=\\beta_0+\\beta_1x_1+...+\\beta_Lx_L$と特定化\n\n-   サンプル内MSEを最大化するように推定\n\n-   線形モデルによる推定は、いくつかの問題がある\n\n    -   異なるグループ間で、$X$の分布が異なる場合、回帰式の定式化に強く依存する\n\n    -   一般に平均効果ではなく、加重平均が推計される\n\n    -   サンプルサイズに比べて、少数のコントロール変数を導入できない\n\n-   以下ではマッチング法、機械学手法を用いた頑強な推定を目指す\n\n::: {.panel-tabset}\n\n### R\n\n-   robust standard errorを計算するためにestimatrパッケージを利用\n\n-   lm_robust関数で推定\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_robust(Price ~ Reform + TradeQ + Size + BuildYear + Distance, # Outcome ~ Treatment + Controls\n          data = Data_R)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Estimate  Std. Error    t value      Pr(>|t|)      CI Lower\n(Intercept) -1388.4988461 26.32698942 -52.740510  0.000000e+00 -1440.1030211\nReform          3.8725217  0.43467146   8.909078  5.737306e-19     3.0205116\nTradeQ          0.6242352  0.19779659   3.155945  1.602999e-03     0.2365293\nSize            0.8355270  0.01284035  65.070430  0.000000e+00     0.8103583\nBuildYear       0.6981813  0.01307451  53.400209  0.000000e+00     0.6725537\nDistance       -1.4171745  0.04437330 -31.937548 1.679446e-216    -1.5041516\n                 CI Upper    DF\n(Intercept) -1336.8946710 14787\nReform          4.7245319 14787\nTradeQ          1.0119411 14787\nSize            0.8606957 14787\nBuildYear       0.7238090 14787\nDistance       -1.3301973 14787\n```\n:::\n:::\n\n\n### Python\n\n-   statsmodelsパッケージを利用\n\n-   heteroscedasticity robust (HC3)を設定\n\n\n::: {.cell}\n\n```{.python .cell-code}\nresults = smf.ols('Price ~ Reform + TradeQ + Size + BuildYear + Distance', data=Data_Python).fit(cov_type='HC3')\nprint(results.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                  Price   R-squared:                       0.425\nModel:                            OLS   Adj. R-squared:                  0.425\nMethod:                 Least Squares   F-statistic:                     1197.\nDate:                Sun, 12 Mar 2023   Prob (F-statistic):               0.00\nTime:                        14:49:42   Log-Likelihood:                -67666.\nNo. Observations:               14793   AIC:                         1.353e+05\nDf Residuals:                   14787   BIC:                         1.354e+05\nDf Model:                           5                                         \nCovariance Type:                  HC3                                         \n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept  -1388.4988     26.334    -52.726      0.000   -1440.113   -1336.885\nReform         3.8725      0.435      8.906      0.000       3.020       4.725\nTradeQ         0.6242      0.198      3.155      0.002       0.236       1.012\nSize           0.8355      0.013     65.048      0.000       0.810       0.861\nBuildYear      0.6982      0.013     53.385      0.000       0.673       0.724\nDistance      -1.4172      0.044    -31.928      0.000      -1.504      -1.330\n==============================================================================\nOmnibus:                    33924.864   Durbin-Watson:                   1.199\nProb(Omnibus):                  0.000   Jarque-Bera (JB):       1076517538.013\nSkew:                          21.520   Prob(JB):                         0.00\nKurtosis:                    1323.863   Cond. No.                     3.28e+05\n==============================================================================\n\nNotes:\n[1] Standard Errors are heteroscedasticity robust (HC3)\n[2] The condition number is large, 3.28e+05. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n```\n:::\n:::\n\n\n:::\n\n### RCTデータへの応用\n\n-   原因変数が完全にランダム化されている場合、因果効果の**識別**を目的に回帰分析を応用する必要はない\n\n-   因果効果の**推定**の改善、効率性向上、を目的とした線形モデルの利用は議論されてきた\n\n-   @lin2013 は、以下のような交差項を導入したモデルを用いることで、平均の差の推定に比べて、漸近的効率性が悪化することはない（同等か改善する）ことを示した\n\n$$E[Y|D,X]=\\beta_{D}\\times D+\\beta_1\\times X_1+...+\\beta_L\\times X_L$$\n\n$$+\\underbrace{\\beta_{1D}\\times D\\times X_1+...+\\beta_{LD}\\times D\\times X_L}_{交差項}$$\n\n-   lm_lin関数で推定可能\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_lin(Price ~ Reform, # Outcome ~ Treatment\n       ~ TradeQ + Size + BuildYear + Distance, # ~ Controls\n       data = Data_R)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       Estimate Std. Error     t value      Pr(>|t|)\n(Intercept)        38.574938756 0.23419642 164.7119043  0.000000e+00\nReform              3.198398709 0.46416205   6.8906941  5.776551e-12\nTradeQ_c            0.589548934 0.24839614   2.3734223  1.763681e-02\nSize_c              0.836196335 0.01462551  57.1738400  0.000000e+00\nBuildYear_c         0.742123631 0.01496681  49.5846277  0.000000e+00\nDistance_c         -1.393206627 0.05322394 -26.1763134 1.120269e-147\nReform:TradeQ_c     0.172655995 0.37815512   0.4565745  6.479836e-01\nReform:Size_c      -0.004222054 0.03058905  -0.1380250  8.902225e-01\nReform:BuildYear_c -0.154969457 0.03044214  -5.0906230  3.612720e-07\nReform:Distance_c  -0.086574362 0.09590703  -0.9026905  3.667049e-01\n                      CI Lower    CI Upper    DF\n(Intercept)        38.11588462 39.03399290 14783\nReform              2.28858332  4.10821410 14783\nTradeQ_c            0.10266158  1.07643629 14783\nSize_c              0.80752852  0.86486415 14783\nBuildYear_c         0.71278682  0.77146044 14783\nDistance_c         -1.49753218 -1.28888107 14783\nReform:TradeQ_c    -0.56857511  0.91388710 14783\nReform:Size_c      -0.06418041  0.05573630 14783\nReform:BuildYear_c -0.21463984 -0.09529907 14783\nReform:Distance_c  -0.27456407  0.10141535 14783\n```\n:::\n:::\n\n\n\n\n## マッチング法による修正 {#sec-Matching}\n\n-   回帰を行う事前準備としてマッチング法を利用する\n\n    -   重回帰が持つ関数形への依存度を減らせる [@ho2007]\n\n    -   MathItパッケージを利用\n\n-   多数のマッチング法が実装されている\n\n### Coarsened exact matching\n\n-   Coarsened exact matching [@iacus2012]の実装\n\n    -   連続変数をカテゴリー変数化することで、マッチングできるサンプルサイズを増やすことが期待できる\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit.m <- matchit(Reform ~ TradeQ + Size + BuildYear + Distance,\n                 data = Data_R,\n                 method = \"CEM\"\n                 )\n```\n:::\n\n\n-   マッチング結果の表示\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit.m\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA matchit object\n - method: Coarsened exact matching\n - number of obs.: 14793 (original), 9625 (matched)\n - target estimand: ATT\n - covariates: TradeQ, Size, BuildYear, Distance\n```\n:::\n:::\n\n\n-   Sample sizesにて、マッチングできなかったサンプル数（14793の事例中、9625サンプルがマッチングできなかった）が確認できる\n\n-   マッチング結果の図示\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit.m |> \n  summary() |> \n  plot(abs = FALSE)\n```\n\n::: {.cell-output-display}\n![](ParameterEstimation_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n-   マッチング結果を変数として含んだデータを作成\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- match.data(fit.m)\n```\n:::\n\n\n-   \"subclass\": マッチングしたグループ\n\n-   \"weights\"：マッチング後の推計に用いるウェイト\n\n-   マッチングしたデータを用いた推定\n\n    -   新たに作成されるweight (defaltではweights)を用いた、加重推定で実装\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_robust(Price ~ Reform + TradeQ + Size + BuildYear + Distance,\n          df,\n          weights = weights,\n          clusters = subclass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Estimate  Std. Error    t value      Pr(>|t|)      CI Lower\n(Intercept) -1311.7224181 49.24745093 -26.635336  1.958605e-69 -1408.8022390\nReform          4.7327819  0.45785352  10.336891  2.940391e-23     3.8336958\nTradeQ          0.4481538  0.28287157   1.584301  1.144379e-01    -0.1090656\nSize            0.7219818  0.01918252  37.637485 2.430409e-113     0.6842264\nBuildYear       0.6615543  0.02458901  26.904467  1.016361e-70     0.6130877\nDistance       -1.3201228  0.07892931 -16.725382  2.395637e-43    -1.4755318\n                 CI Upper       DF\n(Intercept) -1214.6425972 211.0880\nReform          5.6318679 636.5110\nTradeQ          1.0053732 240.7352\nSize            0.7597372 288.6097\nBuildYear       0.7100210 214.7855\nDistance       -1.1647137 264.7544\n```\n:::\n:::\n\n\n### Propensity score with subclassification\n\n-   Coarsened exact matchingでもマッチングできないサンプルが多数出てくる可能性\n\n    -   とくに$X$が大量にある場合\n\n-   1次元の距離指標を用いて、マッチングを行う\n\n    -   距離指標としては、Mahalanobis' Distance、Propensity scoreなど\n\n-   ここではPropensity score $p_d(X)$を用いる\n\n$$p_d(X)\\equiv \\Pr[D=d|X]$$\n\n-   属性$X$のユニットの中で、原因変数の値が$d$である人の割合\n\n-   未知の場合、データから推定する必要がある\n\n-   推定された傾向スコアを用いたStratification マッチング [@imbens2015 の推奨]\n\n    -　ロジットにて傾向スコアを推定\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit.m <- matchit(Reform ~ TradeQ + Size + BuildYear + Distance,\n                 data = Data_R,\n                 method = \"subclass\",\n                 estimand = \"ATE\"\n                 )\n```\n:::\n\n\n-   マッチング結果\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fit.m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nmatchit(formula = Reform ~ TradeQ + Size + BuildYear + Distance, \n    data = Data_R, method = \"subclass\", estimand = \"ATE\")\n\nSummary of Balance for All Data:\n          Means Treated Means Control Std. Mean Diff. Var. Ratio eCDF Mean\ndistance         0.3418        0.2260          0.7825     1.4151    0.2293\nTradeQ           2.4827        2.4422          0.0363     1.0239    0.0101\nSize            49.8096       45.1755          0.2152     0.7953    0.0438\nBuildYear     1993.5456     2003.2632         -0.7800     1.1529    0.1649\nDistance         7.2755        6.9736          0.0740     1.0298    0.0149\n          eCDF Max\ndistance    0.3455\nTradeQ      0.0184\nSize        0.1621\nBuildYear   0.3415\nDistance    0.0337\n\nSummary of Balance Across Subclasses\n          Means Treated Means Control Std. Mean Diff. Var. Ratio eCDF Mean\ndistance         0.2576        0.2545          0.0212     1.0285    0.0062\nTradeQ           2.4606        2.4535          0.0063     1.0386    0.0060\nSize            45.5250       46.3742         -0.0394     0.8215    0.0172\nBuildYear     2000.4362     2000.8722         -0.0350     0.9634    0.0093\nDistance         6.9579        7.0579         -0.0245     0.9047    0.0061\n          eCDF Max\ndistance    0.0160\nTradeQ      0.0145\nSize        0.0600\nBuildYear   0.0353\nDistance    0.0151\n\nSample Sizes:\n               Control Treated\nAll           11012.   3781.  \nMatched (ESS) 10508.41 2553.82\nMatched       11012.   3781.  \nUnmatched         0.      0.  \nDiscarded         0.      0.  \n```\n:::\n:::\n\n\n-   マッチング結果の図示\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit.m |> \n  summary() |> \n  plot(abs = FALSE)\n```\n\n::: {.cell-output-display}\n![](ParameterEstimation_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n-   マッチングしたデータを用いた推定\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_robust(Price ~ Reform + TradeQ + Size + BuildYear + Distance,\n          df,\n          weights = weights,\n          clusters = subclass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Estimate  Std. Error    t value      Pr(>|t|)      CI Lower\n(Intercept) -1311.7224181 49.24745093 -26.635336  1.958605e-69 -1408.8022390\nReform          4.7327819  0.45785352  10.336891  2.940391e-23     3.8336958\nTradeQ          0.4481538  0.28287157   1.584301  1.144379e-01    -0.1090656\nSize            0.7219818  0.01918252  37.637485 2.430409e-113     0.6842264\nBuildYear       0.6615543  0.02458901  26.904467  1.016361e-70     0.6130877\nDistance       -1.3201228  0.07892931 -16.725382  2.395637e-43    -1.4755318\n                 CI Upper       DF\n(Intercept) -1214.6425972 211.0880\nReform          5.6318679 636.5110\nTradeQ          1.0053732 240.7352\nSize            0.7597372 288.6097\nBuildYear       0.7100210 214.7855\nDistance       -1.1647137 264.7544\n```\n:::\n:::\n\n\n## 付録：Dot-and-Whisker plotによる可視化 {#sec-Appendix}\n\n-   Dot-and-Whisker図により点推定量と信頼区間を可視化\n\n::: {.panel-tabset}\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit.m <- matchit(Reform ~ TradeQ + Size + BuildYear + Distance,\n                 data = Data_R,\n                 method = \"CEM\"\n                 )\n\ndf <- match.data(fit.m)\n\nResult1 <- lm_robust(Price ~ Reform + TradeQ + Size + BuildYear + Distance,\n            data = df) |> \n  tidy() |> \n  filter(term == \"Reform\"\n         ) |> \n  mutate(Method = \"OLS\")\n\nResult1 |> \n  ggplot(aes(y = term,\n             x = estimate,\n             xmin = conf.low,\n             xmax = conf.high)\n         ) +\n  geom_pointrange() +\n  geom_vline(xintercept = 0) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ParameterEstimation_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nResult2 <- lm_robust(Price ~ Reform + TradeQ + Size + BuildYear + Distance,\n            data = df,\n            weights = weights,\n            clusters = subclass) |> \n  tidy() |> \n  filter(term == \"Reform\"\n         ) |> \n  mutate(Method = \"Matching + OLS\")\n\nResult1 |> \n  bind_rows(Result2) |> \n  ggplot(aes(y = Method,\n             x = estimate,\n             xmin = conf.low,\n             xmax = conf.high)\n         ) +\n  geom_pointrange() +\n  geom_vline(xintercept = 0) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ParameterEstimation_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n:::",
    "supporting": [
      "ParameterEstimation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}